import java.util.Collections;
import java.util.HashMap;

aspect MetaGrammar {
	coll HashMap<String, ASTDecl> Grammar.declsByName() with putAll root Grammar;
	coll HashSet<String> Grammar.usedDeclsByName() with add root Grammar;
	coll HashSet<String> Grammar.usedDeclsInListByName() with add root Grammar;
	ASTDecl contributes Collections.singletonMap(getIdDecl().getID(), this) to Grammar.declsByName();

	inh Grammar TypeDecl.getGrammar();
	eq Grammar.getTypeDecl().getGrammar() = this;
	inh Grammar Id.getGrammar();

	public void Grammar.transformToPatternGrammar() {
		java.util.List<TypeDecl> newTypeDecls = new ArrayList<TypeDecl>();
		newTypeDecls.add(ASTDecl.genMetaVariable());
		for (TypeDecl d : getTypeDeclsNoTransform()) {
			ASTDecl astD = (ASTDecl) d;
			if (astD.getIdDecl().getID().equals("ASTNode") ||
				astD.getIdDecl().getID().equals("Opt") ||
				astD.getIdDecl().getID().equals("List")) {
				continue;
			}

			newTypeDecls.add(astD.genMetaVarClass());
			newTypeDecls.add(astD.genIndexMetaVarClass());
			newTypeDecls.add(astD.genGapClass());
		}

		getTypeDeclsNoTransform().addAll(newTypeDecls);
	}

	public abstract Id Component.getId();

	public static String ASTDecl.GAP = "Gap";
	public static String ASTDecl.METAVARIABLE = "MetaVar";
	public static String ASTDecl.INDEX_METAVARIABLE = "IndexMetaVar";

	public static ASTDecl ASTDecl.genMetaVariable() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(new IdDecl("MetaVariable"));
		decl.addComponent(new TokenComponent(new Id(new Opt(new NameNode("ID")),
													new IdUse("String"))));
		return decl;
	}

	public ASTDecl ASTDecl.genMetaVarClass() {
		IdDecl id = new IdDecl(METAVARIABLE + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		IdUse superClass = new IdUse(getIdDecl().getID());
		decl.setSuperClass(superClass);
		AggregateComponent metaVar = new AggregateComponent();
		metaVar.setId(new Id(new Opt(new NameNode("Var")),
							 new IdUse("MetaVariable")));
		decl.addComponent(metaVar);
		return decl;
	}

	public ASTDecl ASTDecl.genIndexMetaVarClass() {
		IdDecl id = new IdDecl(INDEX_METAVARIABLE + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		decl.setSuperClass(new IdUse(getIdDecl().getID()));

		AggregateComponent metaVar = new AggregateComponent();
		metaVar.setId(new Id(new Opt(new NameNode("Var")),
							 new IdUse("MetaVariable")));
		decl.addComponent(metaVar);

		decl.addComponent(new AggregateComponent(new Id(new Opt(new NameNode("Element")),
														new IdUse(getIdDecl().getID()))));
		return decl;
	}

	public ASTDecl ASTDecl.genGapClass() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(new IdDecl(GAP + getIdDecl().getID()));
		decl.setSuperClass(new IdUse(getIdDecl().getID()));
		return decl;
	}


	syn boolean ASTDecl.isReferred() = getGrammar().usedDeclsByName().contains(getIdDecl().getID());
	syn boolean ASTDecl.isReferredInList() = getGrammar().usedDeclsInListByName().contains(getIdDecl().getID());
	AggregateComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof AggregateComponentNTA)
		to Grammar.usedDeclsByName();
	ListComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof ListComponentNTA)
		to Grammar.usedDeclsByName();
	ListComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof ListComponentNTA)
		to Grammar.usedDeclsInListByName();

	public void Grammar.generatePatternGrammarInfo() {
		File file = targetJavaFile("PatternGrammarInfo");
		try {
			PrintStream stream = new PrintStream(new FileOutputStream(file));
			if ( !config().license.isEmpty()) {
				stream.println(config().license);
			}

			if (!config().packageName().isEmpty()) {
				stream.println("package " + config().packageName() + ";\n");
			}

			stream.println("public class PatternGrammarInfo {");
			stream.println("public static String getNodeSuperType(String nodeType) {");
			stream.println("  switch (nodeType) {");
			stream.println("  default: return null;");
			for (TypeDecl d : getTypeDeclsNoTransform()) {
				ASTDecl astD = (ASTDecl) d;
				if (!astD.hasSuperClass())
					continue;
				stream.println(String.format("  case \"%s\": return \"%s\";", astD.getIdDecl().getID(), astD.getSuperClassName()));
			}
			stream.println("}");
			stream.println("}");
			stream.println();
			stream.println("public static java.util.List<String> getNodeType() {");
			stream.println("return java.util.Arrays.asList(");
			for (int i = 0; i < getNumTypeDeclNoTransform(); ++i) {
				if (i != 0)
					stream.println(",");
				ASTDecl astD = (ASTDecl) getTypeDeclNoTransform(i);
				stream.print(String.format("\"%s\"", astD.getIdDecl().getID()));
			}
			stream.println(");");
			stream.println("}");
			stream.println("}");
		} catch (FileNotFoundException f) {
			System.err.println("Could not create file " + file.getName() + " in " + file.getParent());
			System.exit(1);
		}
	}
}
