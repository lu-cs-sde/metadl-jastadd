import java.util.Collections;
import java.util.HashMap;

aspect MetaGrammar {
	coll HashMap<String, ASTDecl> Grammar.declsByName() with putAll root Grammar;
	coll HashSet<String> Grammar.usedDeclsByName() with add root Grammar;
	coll HashSet<String> Grammar.usedDeclsInListByName() with add root Grammar;
	ASTDecl contributes Collections.singletonMap(getIdDecl().getID(), this) to Grammar.declsByName();

	inh Grammar TypeDecl.getGrammar();
	eq Grammar.getTypeDecl().getGrammar() = this;
	inh Grammar Id.getGrammar();

	syn nta List<ASTDecl> Grammar.patternLangASTDecls() {
		List<ASTDecl> typeDecls = new List<ASTDecl>();

		typeDecls.add(ASTDecl.genMetaVariable());

		for (TypeDecl d : getTypeDecls()) {
			if (!(d instanceof ASTDecl))
				continue;

			ASTDecl astD = (ASTDecl) d;
			if (astD.getIdDecl().getID().equals("ASTNode") ||
				astD.getIdDecl().getID().equals("Opt") ||
				astD.getIdDecl().getID().equals("List"))
				continue;

			typeDecls.add(astD.genModifiedDecl());
			typeDecls.add(astD.genMetaOrConcreteClass());
			typeDecls.add(astD.genMetaVarClass());
			typeDecls.add(astD.genMetaElementClass());
			typeDecls.add(astD.genGapClass());
			typeDecls.add(astD.genConcreteClass());
		}

		return typeDecls;
	}

	public abstract Id Component.getId();

	public static String ASTDecl.META_OR_CONCRETE = "MetaOrConcrete";
	public static String ASTDecl.METAELEMENT = "MetaElement";
	public static String ASTDecl.CONCRETE = "Concrete";
	public static String ASTDecl.GAP = "Gap";
	public static String ASTDecl.METAVARIABLE = "MetaVar";
	public static String ASTDecl.INDEX_METAVARIABLE = "IndexMetaVar";

	public Id Id.metaId() {
		Id id = new Id();
		if (hasNameNode())
			id.setNameNode(getNameNode().treeCopyNoTransform());
		id.setIdUse(new IdUse(ASTDecl.META_OR_CONCRETE + getIdUse().getID()));
		return id;
	}

	// Generate a modified declaration where all the
	// components are refering to the meta-or-concrete correspondents
	// of the original components
	public ASTDecl ASTDecl.genModifiedDecl() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(getIdDecl().treeCopyNoTransform());
		if (hasAbstract())
			decl.setAbstract(new Abstract());
		if (hasSuperClass())
			decl.setSuperClass(getSuperClass().treeCopyNoTransform());

		for (Component c : getComponents()) {
			if (c instanceof ListComponent
				&& !(c instanceof ListComponentNTA)) {
				decl.addComponent(new ListComponent(c.getId().metaId()));
			} else if (c instanceof OptionalComponent
					   && !(c instanceof OptionalComponentNTA)) {
				decl.addComponent(new OptionalComponent(c.getId().metaId()));
			} else if (c instanceof AggregateComponent
					   && !(c instanceof AggregateComponentNTA)) {
				decl.addComponent(new AggregateComponent(c.getId().metaId()));
			} else {
				// discard NTA components
				// newAstDecl.addComponent(c.treeCopyNoTransform());
			}
		}
		return decl;
	}

	public ASTDecl ASTDecl.genMetaOrConcreteClass() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(new IdDecl(META_OR_CONCRETE + getIdDecl().getID()));
		decl.setAbstract(new Abstract());
		// if (hasSuperClass() && !getSuperClass().getID().equals("ASTNode")) {
		// 	String superClassName = getSuperClass().getID();
		// 	decl.setSuperClass(new IdUse(META_OR_CONCRETE + superClassName));
		// }

		// for (Component c : getComponents()) {
		// 	if (c instanceof ListComponent
		// 		&& !(c instanceof ListComponentNTA)) {
		// 		decl.addComponent(new ListComponent(c.getId().metaId()));
		// 	} else if (c instanceof OptionalComponent
		// 			   && !(c instanceof OptionalComponentNTA)) {
		// 		decl.addComponent(new OptionalComponent(c.getId().metaId()));
		// 	} else if (c instanceof AggregateComponent
		// 			   && !(c instanceof AggregateComponentNTA)) {
		// 		decl.addComponent(new AggregateComponent(c.getId().metaId()));
		// 	} else {
		// 		// discard NTA components
		// 		// newAstDecl.addComponent(c.treeCopyNoTransform());
		// 	}
		// }
		return decl;
	}

	public static ASTDecl ASTDecl.genMetaVariable() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(new IdDecl("MetaVariable"));
		decl.addComponent(new TokenComponent(new Id(new Opt(new NameNode("ID")),
													new IdUse("String"))));
		return decl;
	}

	public ASTDecl ASTDecl.genMetaVarClass() {
		IdDecl id = new IdDecl(METAVARIABLE + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		IdUse superClass = new IdUse(METAELEMENT + getIdDecl().getID());
		decl.setSuperClass(superClass);
		AggregateComponent metaVar = new AggregateComponent();
		metaVar.setId(new Id(new Opt(new NameNode("Var")),
							 new IdUse("MetaVariable")));
		decl.addComponent(metaVar);
		return decl;
	}

	public ASTDecl ASTDecl.genMetaElementClass() {
		IdDecl id = new IdDecl(METAELEMENT + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		decl.setAbstract(new Abstract());
		decl.setSuperClass(new IdUse(META_OR_CONCRETE + getIdDecl().getID()));
		return decl;
	}

	public ASTDecl ASTDecl.genIndexMetaVarClass() {
		IdDecl id = new IdDecl(INDEX_METAVARIABLE + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		decl.setSuperClass(new IdUse(META_OR_CONCRETE + getIdDecl().getID()));

		AggregateComponent metaVar = new AggregateComponent();
		metaVar.setId(new Id(new Opt(new NameNode("Var")),
							 new IdUse("MetaVariable")));
		decl.addComponent(metaVar);

		decl.addComponent(new AggregateComponent(new Id(new Opt(new NameNode("Element")),
														new IdUse(METAELEMENT + getIdDecl().getID()))));
		return decl;
	}

	public ASTDecl ASTDecl.genConcreteClass() {
		IdDecl id = new IdDecl(CONCRETE + getIdDecl().getID());
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(id);
		decl.setSuperClass(new IdUse(METAELEMENT + getIdDecl().getID()));
		decl.addComponent(new AggregateComponent(new Id(new Opt(new NameNode("ConcreteNode")),
														new IdUse(getIdDecl().getID()))));

		return decl;
	}

	public ASTDecl ASTDecl.genGapClass() {
		ASTDecl decl = new ASTDecl();
		decl.setIdDecl(new IdDecl(GAP + getIdDecl().getID()));
		decl.setSuperClass(new IdUse(META_OR_CONCRETE + getIdDecl().getID()));
		return decl;
	}


	syn boolean ASTDecl.isReferred() = getGrammar().usedDeclsByName().contains(getIdDecl().getID());
	syn boolean ASTDecl.isReferredInList() = getGrammar().usedDeclsInListByName().contains(getIdDecl().getID());
	AggregateComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof AggregateComponentNTA)
		to Grammar.usedDeclsByName();
	ListComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof ListComponentNTA)
		to Grammar.usedDeclsByName();
	ListComponent contributes this.getId().getIdUse().getID()
		when !(this instanceof ListComponentNTA)
		to Grammar.usedDeclsInListByName();
}
