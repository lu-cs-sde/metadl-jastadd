/* Copyright (c) 2005-2016, The JastAdd Team
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Lund University nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
import org.jastadd.ast.AST.*;

import java.io.*;
import java.util.*;
import java.util.regex.*;

aspect JaddCodeGen {

  /**
   * Build the default AST node types (ASTNode, List, Opt)
   * and insert them into the grammar.
   */
  public void Grammar.addImplicitNodeTypes() {
    ASTDecl cl;
    IdDecl name;

    // Add ASTNode.
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(config().astNodeType());
    cl.setIdDecl(name);
    cl.setFileName("");
    cl.modifiers = "public";
    addTypeDecl(cl);

    // Add List.
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(config().listType());
    cl.setIdDecl(name);
    cl.setFileName("");
    cl.modifiers = "public";
    addTypeDecl(cl);

    // Add Opt.
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(config().optType());
    cl.setIdDecl(name);
    cl.setFileName("");
    cl.modifiers = "public";
    addTypeDecl(cl);
  }

  syn int ASTDecl.numNonNTAComponent() {
    int num = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        num++;
      }
    }
    return num;
  }

  /**
   * Number of children, including NTAs but excluding tokens
   */
  syn int ASTDecl.childCount() {
    int i = 0;
    for (Component c : components()) {
      if (!(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  /**
   * Number of children, excluding NTAs and tokens
   */
  syn int ASTDecl.numRegularChildren() {
    int i = 0;
    for (Component c : components()) {
      if (!c.isNTA() && !(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

  syn boolean ASTDecl.hasSynEq(String name) {
    for (SynEq eq : getSynEqList()) {
      if (eq.name().equals(name)) {
        return true;
      }
    }
    if (superClass() != null) {
      return superClass().hasSynEq(name);
    }
    return false;
  }

  /**
   * Generates a variant of getChildNoTransform used in concurrent evaluation.
   *
   * <p>Special handing of NTAs is needed in concurrent evaluation
   * to avoid extra NTA evaluation when evaluating inherited attributes.
   * The goal is to avoid evaluating an NTA when checking which child
   * an inherited attribute is evaluated on.
   */
  public void ASTDecl.emitConcurrentGetChild(PrintWriter out) {
    // Build list of NTA indices.
    String getNta = "";
    int numNta = 0;
    int i = 0;
    for (Component c : components()) {
      if (c instanceof TokenComponent) {
        // Tokens are not stored in the child array.
        continue;
      }

      String attrName = null;
      if (c instanceof ListComponentNTA) {
        attrName = "get" + c.name() + "List";
      } else if (c instanceof OptionalComponentNTA) {
        attrName = "get" + c.name() + "Opt";
      } else if (c instanceof AggregateComponentNTA) {
        attrName = "get" + c.name();
      }

      if (attrName != null && hasSynEq(attrName)) {
        // Only generate this code if the NTA has an equation on this class.
        getNta += "case " + i + ":\n";
        getNta += "  _value = " + attrName + "_value.get();\n";
        getNta += "  break;\n";
        numNta += 1;
      }
      i += 1;
    }
    TemplateContext tt = templateContext();
    if (numNta > 0) {
      tt.bind("GetNTAs", getNta);
      tt.expand("ASTDecl.getChildNoTransform:concurrent", out);
    } else {
      tt.expand("ASTDecl.getChildNoTransform:concurrent:empty", out);
    }
  }

  /**
   * Default constructor: creates list and opt nodes for
   * all list and opt children. Initializes NTAs.
   */
  public void ASTDecl.emitDefaultConstructor(PrintWriter out) {
    TemplateContext tt = templateContext();
    String finalInit = "";
    if (config().legacyRewrite() && isRootNode()) {
      finalInit = "is$Final(true);";
    }
    tt.bind("FinalInit", finalInit);
    tt.expand("ASTDecl.emitDefaultConstructor", out);
  }

  /**
   * Emits the (nta) child initialization method.
   */
  public void ASTDecl.emitChildInitMethod(PrintWriter out) {
    TemplateContext tt = templateContext();

    String initChildArray = "";
    if (childCount() > 0) {
      initChildArray = "children = new " + config().astNodeType() + "[" + childCount() + "];";
      initChildArray += genIncrementalInitChildHandlers();
    }

    tt.bind("InitChildArray", initChildArray);

    StringBuffer childInit = new StringBuffer();
    childInit.append(tt.expand("State.incHookConstructionStart"));
    int i = 0;
    for (Component c : components()) {
      if (c instanceof ListComponent) {
        if (config().emptyContainerSingletons()) {
          childInit.append("setChild(" + config().listType() + ".EMPTY, " + i + ");\n");
        } else {
          childInit.append("setChild(new " + config().listType() + "(), " + i + ");\n");
        }
        i++;
      } else if (c instanceof OptionalComponent) {
        if (config().emptyContainerSingletons()) {
          childInit.append("setChild(" + config().optType() + ".EMPTY, " + i + ");\n");
        } else {
          childInit.append("setChild(new " + config().optType() + "(), " + i + ");\n");
        }
        i++;
      } else if (c instanceof AggregateComponent) {
        i++;
      }
    }
    childInit.append(tt.expand("State.incHookConstructionEnd"));

    tt.bind("ChildInit", childInit.toString());
    tt.expand("ASTDecl.emitChildInitMethod", out);
  }

  /**
   * Emits the constructor body for tree building constructors.
   */
  public void ASTDecl.emitBuildingConstructorBody(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("State.incHookConstructionStart", out);

    int param = 0;
    int childIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (c instanceof TokenComponent) {
          TokenComponent t = (TokenComponent) c;
          out.format("%sset%s(p%d);%n", config().ind(2), t.name(), param);
        } else {
          out.format("%ssetChild(p%d, %d);%n", config().ind(2), param, childIndex);
          childIndex++;
        }
        param += 1;
      } else {
        if (c instanceof ListComponent
            || c instanceof OptionalComponent
            || c instanceof AggregateComponent) {
          childIndex++;
        }
      }
    }
    if (config().legacyRewrite() && isRootNode()) {
      out.println(config().ind(2) + "is$Final(true);");
    }

    tt.expand("State.incHookConstructionEnd", out);
  }

  /**
   * Emits annotation on the constructor with information about the arguments.
   *
   * <p>Three arrays are generated for the constructor, one with the name of the
   * children, one with the type and one with the kind(Child, List, Opt or Token).
   */
  private void ASTDecl.emitConstructorAnnotation(PrintWriter out){
    out.println(config().indent + "@ASTNodeAnnotation.Constructor(");

    out.print(config().ind(2) + "name = {");
    int paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        out.print("\"");
        out.print(c.name());
        out.print("\"");
        paramIndex++;
      }
    }
    out.println("},");

    out.print(config().ind(2) + "type = {");
    paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        out.print("\"");
        out.print(c.constrParmType());
        out.print("\"");
        paramIndex++;
      }
    }
    out.println("},");

    out.print(config().ind(2) + "kind = {");
    paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        out.print("\"");
        out.print(c.kind());
        out.print("\"");
        paramIndex++;
      }
    }
    out.println("}");
    out.println(config().indent + ")");
  }

  /**
   * Constructor to build trees bottom up.
   */
  public void ASTDecl.emitBuildingConstructor(PrintWriter out) {
    if (components().isEmpty()) {
      // We only build constructors if there are components.
      return;
    }
    if (config().generateAnnotations()){
        emitConstructorAnnotation(out);
    }

    out.print(config().indent + "public " + name() + "." + name() + "(");
    int paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        out.print(c.constrParmType() + " p" + paramIndex);
        paramIndex++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(config().indent + "}");
  }

  public void ASTDecl.emitGenericBuildingConstructor(PrintWriter out) {
    if (components().isEmpty()) {
      // We only build constructors if there are components.
      return;
    }

	boolean stringArg = false;
	for (Component c : components()) {
		if (!c.isNTA() && c instanceof TokenComponent && c.constrParmType().equals("String")
			|| c.constrParmType().equals("java.lang.String")) {
			stringArg = true;
		}
	}

	// Only build constructors if there are other components except tokens
	if (stringArg)
		return;

    if (config().generateAnnotations()){
        emitConstructorAnnotation(out);
    }

    out.print(config().indent + "public " + name() + "." + name() + "(");
    int paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        if (c instanceof TokenComponent)
			out.print(c.constrParmType() + " p" + paramIndex);
		else
			out.print("ASTNode p" + paramIndex);
        paramIndex++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(config().indent + "}");
  }

  public void ASTDecl.emitSymbolConstructor(PrintWriter out) {
    if (components().isEmpty()) {
      // We only build constructors if there are components.
      return;
    }
    boolean stringArg = false;
    for (Component c : components()) {
      if (!c.isNTA() && c instanceof TokenComponent && c.constrParmType().equals("String")
          || c.constrParmType().equals("java.lang.String")) {
        stringArg = true;
      }
    }
    if (!stringArg) {
      return;
    }
    out.format("%spublic %s.%s(", config().indent, name(), name());
    int paramIndex = 0;
    for (Component c : components()) {
      if (!c.isNTA()) {
        if (paramIndex != 0) out.print(", ");
        if (c instanceof TokenComponent && c.constrParmType().equals("String")
            || c.constrParmType().equals("java.lang.String")) {
          out.format("beaver.Symbol p%d", paramIndex);
        } else {
          out.format("%s p%d", c.constrParmType(), paramIndex);
        }
        paramIndex++;
      }
    }
    out.println(") {");
    emitBuildingConstructorBody(out);
    out.println(config().indent + "}");
  }

  public void Grammar.genReset(PrintWriter out) {
    templateContext().expand("ASTState.reset", out);
  }

  /**
   * Generate state class aspect declarations.
   *
   * @param out Aspect output stream
   */
  public void Grammar.emitStateClass(PrintWriter out) {
    templateContext().expand("ASTState", out);
  }

  /**
   * String for calculating the initial child array size.
   * List nodes use the minimum list size as the initial child
   * array size.
   */
  syn String ASTDecl.initialChildArraySize() =
      String.format("(i + 1 > %d || !(this instanceof %s)) ? i + 1 : %d",
          config().minListSize(), config().listType(), config().minListSize());

  /**
   * Checks that ASTNode.state can be evaluated.
   */
  syn String ASTDecl.debugASTNodeState() {
    if (config().debugMode() && !grammar().roots().isEmpty()) {
      // Check if a new state object is created for a node that is not a root node.
      StringBuilder buf = new StringBuilder();
      buf.append("if (");
      boolean first = true;
      for (Iterator iter = grammar().roots().iterator(); iter.hasNext(); ) {
        ASTDecl root = (ASTDecl)iter.next();
        if (!first) {
          buf.append(" && ");
        }
        first = false;
        buf.append("!(this instanceof " + root.name() + ")");
      }
      buf.append(")\n");
      buf.append(config().indent + "throw new RuntimeException(\"Trying to evaluate state in "
          + "a node which is not attached to the main tree\");");
      return buf.toString();
    } else {
      return "";
    }
  }

  /**
   * Generate implicit aspect declarations for the ASTNode type.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitASTNodeDecls(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("ASTNode.declarations", out);
    tt.expand("ASTNode.getChild", out);
    tt.expand("ASTNode.addChild", out);
    tt.expand("ASTNode.getChildNoTransform", out);
    tt.expand("ASTNode.numChildren", out);
    tt.expand("ASTNode.setChild", out);
    tt.expand("ASTNode.insertChild", out);
    tt.expand("ASTNode.removeChild", out);
    tt.expand("ASTNode.getParent", out);
    tt.expand("ASTNode.setParent", out);
    tt.expand("ASTNodeAnnotation", out);
    tt.expand("ASTNode.debugDecls", out);
    if (config().lineColumnNumbers()) {
      tt.expand("ASTNode.lineColumnNumbers", out);
    }
  }

  /**
   * @return <code>true</code> if the list$touched field is needed for this
   * ASTDecl.
   */
  syn boolean ASTDecl.needsListTouched() = config().legacyRewrite();

  /**
   * Generate implicit aspect declarations for the List type.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitListDecls(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("List.implicitAspectDecls", out);
  }

  /**
   * Generate implicit aspect declarations for regular
   * (non-ASTNode, non-List, non-Opt) node types.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitRegularNodeDecls(PrintWriter out) {
    TemplateContext tt = templateContext();
    tt.expand("RegularNodeType.getNumChild", out);
    if (config().debugMode() && isRootNode()) {
      tt.expand("RegularNodeType.debugNodeAttachmentIsRoot", out);
    }
  }

  syn boolean ASTDecl.isASTNodeDecl() = name().equals(config().astNodeType());

  syn boolean ASTDecl.isOptDecl() = name().equals(config().optType());

  syn boolean ASTDecl.isListDecl() = name().equals(config().listType());

  syn boolean ASTDecl.isOptSubtype() =
      isOptDecl() || (superClass() != null && superClass().isOptSubtype());

  syn boolean ASTDecl.isListSubtype() =
      isListDecl() || (superClass() != null && superClass().isListSubtype());

  /**
   * Check the node structure of a regular (non-Opt, non-List)
   * JJTree node.
   */
  syn String ASTDecl.checkRegularNodeStructure() {
    StringBuilder buf = new StringBuilder();
    int j = 0;
    for (Component c : components()) {
      buf.append(c.checkComponentStructure(j));
      if (!(c instanceof TokenComponent)) {
        j++;
      }
    }
    return buf.toString();
  }

  /**
   * Check the structure of a single JJTree component.
   */
  syn String Component.checkComponentStructure(int childIndex) = "";

  eq ListComponent.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("ListComponent.checkComponentStructure");
  }

  eq OptionalComponent.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("OptionalComponent.checkComponentStructure");
  }

  eq AggregateComponent.checkComponentStructure(int childIndex) {
    TemplateContext tt = templateContext();
    tt.bind("ChildIndex", "" + childIndex);
    tt.bind("HostClassName", hostClass().name());
    return tt.expand("AggregateComponent.checkComponentStructure");
  }

  syn String ASTDecl.jjtGenPrintChildren() {
    StringBuilder buf = new StringBuilder();
    for (Component c : components()) {
      if (c instanceof TokenComponent) {
        TokenComponent t = (TokenComponent) c;
        buf.append("out.print(\"\\\"\" + get" + t.name() + "() + \"\\\"\");\n");
      }
    }
    return buf.toString();
  }

  public void ASTDecl.emitConstructor(PrintWriter out) {
    emitDefaultConstructor(out);
    emitChildInitMethod(out);

    if (numNonNTAComponent() != 0) {
      emitBuildingConstructor(out);
      emitGenericBuildingConstructor(out);
      if (config().useBeaverSymbol()) {
        emitSymbolConstructor(out);
      }
    }

    if (isOptDecl()) {
      TemplateContext tt = templateContext();
      tt.expand("OptDecl.constructor", out);
    }

    if (isListDecl()) {
      TemplateContext tt = templateContext();
      tt.expand("ListDecl.constructor", out);
    }
  }

  /**
   * Emit aspect declaration for the mayHaveRewrite method.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitMayHaveRewrite(PrintWriter out) {
    String ind = config().indent;
    String ind2 = config().ind(2);
    out.println(ind + "/**");
    out.println(ind + " * @apilevel internal");
    out.println(ind + " */");
    out.println(ind + "public boolean " + name() + ".mayHaveRewrite() {");
    if (config().legacyRewrite() && name().equals(config().listType())) {
      out.println(ind2 + "return true;");
    } else if (hasRewrites()) {
      out.println(ind2 + "return true;");
    } else {
      out.println(ind2 + "return false;");
    }
    out.println(ind + "}");
  }

  /**
   * Generate aspect code for implicit methods and fields in the default node
   * types ASTNode, List, Opt.
   *
   * @param out Aspect output stream
   */
  public void ASTDecl.emitImplicitDeclarations(PrintWriter out) {
    emitConstructor(out);

    if (config().jjtree()) {
      TemplateContext tt = templateContext();
      tt.expand("JJTree.dumpTree", out);
      tt.expand("JJTree.jjtAccept", out);
      tt.expand("JJTree.jjtAddChild", out);
      tt.expand("JJTree.checkChild", out);
    }

    // Generate code common for all nodes by adding them to ASTNode.
    if (isASTNodeDecl()) {
      emitImplicitASTNodeDecls(out);
      grammar().genReset(out);
    } else if (isListDecl()) {
      emitImplicitListDecls(out);
        templateContext().expand("List.additionalDeclarations", out);
    } else if (isOptDecl()) {
      templateContext().expand("Opt.additionalDeclarations", out);
      // do not override getNumChild with regular node implementation
    } else {
      emitImplicitRegularNodeDecls(out);
    }

    if (config().rewriteEnabled()) {
      emitMayHaveRewrite(out);
    }

    emitFlushCache(out);
    emitCloneNode(out);
    emitCopyNode(out);
    emitFullCopy(out);

    if (config().concurrentEval()
        && !isASTNodeDecl()
        && !isOptDecl()
        && !isListDecl()) {
      emitConcurrentGetChild(out);
    }

    genIncremental(out);
  }

  public abstract void Component.jaddGen(int index, boolean publicModifier, ASTDecl decl);

  public void ListComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("ListType", config().listType() + "<" + getId().type() + ">");
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("ListComponent"));
  }

  public void OptionalComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("OptType", config().optType() + "<" + getId().type() + ">");
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("OptionalComponent"));
  }

  private boolean TokenComponent.called = false;

  public void TokenComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Id", name());
    tt.bind("Type", type());
    tt.bind("TypeInSignature", ASTNode.convTypeNameToSignature(type()));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    boolean isStringToken = type().equals("String")
        || type().equals("java.lang.String");
    boolean isRedefined = decl.redefinesTokenComponent(this);
    tt.bind("IsStringToken", isStringToken);
    tt.bind("IsRedefined", isRedefined);

    parse(tt.expand("TokenComponent"));
  }

  public void AggregateComponent.jaddGen(int index, boolean publicModifier, ASTDecl decl) {
    TemplateContext tt = templateContext();
    tt.bind("Type", getId().type());
    tt.bind("Name", getId().name());
    tt.bind("Index", String.valueOf(index));
    tt.bind("Host", decl.name());
    tt.bind("Modifier", publicModifier ? "public" : "private");

    parse(tt.expand("AggregateComponent"));
  }

  protected void Component.parse(String s) {
    org.jastadd.jrag.AST.JragParser jp =
        new org.jastadd.jrag.AST.JragParser(new java.io.StringReader(s));
    jp.root = grammar();

    // The file name is not meaningful, as the component is completely generated
    // from a node type specification.
    jp.setFileName("");

    try {
      jp.AspectBodyDeclarationsEOF();
    } catch (Exception e) {
      System.err.println("Aspect parsing error: " + e.getMessage());
      e.printStackTrace(System.err);
    }
  }
}
