# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# This template file contains implicit aspect declarations for the
# List AST node type

List.implicitAspectDecls [[

$if(#needsListTouched)
  private boolean $List.list$$touched = true;
$endif

  public $List<T> $List.add(T node) {
$if(DebugMode)
    if (node instanceof $List) {
      throw new RuntimeException("Lists can not have children of type $List");
    }
    if (node instanceof $Opt) {
      throw new RuntimeException("Lists can not have children of type $Opt");
    }
$endif
    addChild(node);
    return this;
  }

  public $List<T> $List.addAll(Iterable<? extends T> c) {
$if(DebugMode)
    for (T node : c) {
      if (node instanceof $List) {
        throw new RuntimeException("Lists can not have children of type $List");
      }
      if (node instanceof $Opt) {
        throw new RuntimeException("Lists can not have children of type $Opt");
      }
    }
$endif
    for (T node : c) {
      addChild(node);
    }
    return this;
  }

  public $List<T> $List.insertChild($ASTNode node, int i) {
$if(#needsListTouched)
    list$$touched = true;
$endif
    super.insertChild(node, i);
    return this;
  }

  public $List<T> $List.addChild(T node) {
$if(#needsListTouched)
    list$$touched = true;
$endif
    super.addChild(node);
    return this;
  }

  /** @apilevel low-level */
  public void $List.removeChild(int i) {
$if(#needsListTouched)
    list$$touched = true;
$endif
    super.removeChild(i);
  }

  public int $List.getNumChild() {
$if(#needsListTouched)
    if (list$$touched) {
      for (int i = 0; i < getNumChildNoTransform(); i++) {
        getChild(i);
      }
      list$$touched = false;
    }
$endif
    return getNumChildNoTransform();
  }

  /** @return an iterator to iterate over elements in this list node. */
  @Override
  public java.util.Iterator<T> $List.iterator() {
    return astChildIterator();
  }
]]
