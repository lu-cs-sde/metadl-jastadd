# Copyright (c) 2013-2016, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

AggregateComponent [[
$if(!#isNTA)
  /**
   * Replaces the $Name child.
   * @param node The new node to replace the $Name child.
   * @apilevel high-level
   */
  public $Host $Host.set$Name($Type node) {
    setChild(node, $Index);
    return this;
  }

  public $Host $Host.set$Name($ASTNode node) {
    setChild(node, $Index);
    return this;
  }
$endif
$if(#ntaShadowingNonNTA)
  /**
   * This method should not be called. This method throws an exception due to
   * the corresponding child being an NTA shadowing a non-NTA child.
   * @param node
   * @apilevel internal
   */
  public $Host $Host.set$Name($Type node) {
    throw new Error("Can not replace NTA child $Name in $Host!");
  }

  public $Host $Host.set$Name($ASTNode node) {
    throw new Error("Can not replace NTA child $Name in $Host!");
  }

$endif
$if(#isNTA)
  /**
   * Retrieves the $Name child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the $Name child.
   * @apilevel low-level
   */
  public $Type $Host.get$(Name)NoTransform() {
    return ($Type) getChildNoTransform($Index);
  }
  /**
   * Retrieves the child position of the optional child $Name.
   * @return The the child position of the optional child $Name.
   * @apilevel low-level
   */
  protected int $Host.get$(Name)ChildPosition() {
    return $Index;
  }
$else
  /**
   * Retrieves the $Name child.
   * @return The current node used as the $Name child.
   * @apilevel high-level
   */
  $include(AggregateComponent.generatedAnnotations)
  public $Type $Host.get$Name() {
    return ($Type) getChild($Index);
  }
  /**
   * Retrieves the $Name child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the $Name child.
   * @apilevel low-level
   */
  public $Type $Host.get$(Name)NoTransform() {
    return ($Type) getChildNoTransform($Index);
  }
$endif
]]
