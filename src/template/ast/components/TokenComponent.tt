# Copyright (c) 2013, The JastAdd Team
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the Lund University nor the names of its
#       contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

TokenComponent = [[

  $include(TokenComponent.incHookTokenHandler)

$if(!#isNTA)
  /**
   * Replaces the lexeme $Id.
   * @param value The new value for the lexeme $Id.
   * @apilevel high-level
   */
  $Modifier $Host $Host.set$Id($Type value) {
    token$(TypeInSignature)_$Id = value;
    $include(TokenComponent.incHookSetToken)
    return this;
  }

$endif
$if(#ntaShadowingNonNTA)
  /**
   * This method should not be called. This method throws an exception due to
   * the corresponding child being an NTA shadowing a non-NTA child.
   * @param node
   * @apilevel internal
   */
  public $Host $Host.set$Id($Type node) {
    throw new Error("Can not replace NTA child $Id in $Host!");
  }

$endif
$if(IsRedefined)
  /** @apilevel internal */
  protected $Type $Host.token$(TypeInSignature)_$Id;
$endif

$if(!#isNTA)
  $if(IsStringToken)
    $if(Beaver)
      $if(IsRedefined)
  $Modifier int $Host.$(Id)start;
  $Modifier int $Host.$(Id)end;
      $endif
  /**
   * JastAdd-internal setter for lexeme $Id using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme $Id
   * @apilevel internal
   */
  $Modifier $Host $Host.set$Id(beaver.Symbol symbol) {
    if (symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("set$Id is only valid for String lexemes");
    token$(TypeInSignature)_$Id = (String)symbol.value;
    $(Id)start = symbol.getStart();
    $(Id)end = symbol.getEnd();
    $include(TokenComponent.incHookSetToken)
    return this;
  }
    $endif
  /**
   * Retrieves the value for the lexeme $Id.
   * @return The value for the lexeme $Id.
   * @apilevel high-level
   */
  $include(TokenComponent.generatedAnnotations)
  $Modifier $Type $Host.get$Id() {
    $include(TokenComponent.incHookGetToken)
    return token$(TypeInSignature)_$Id != null ? token$(TypeInSignature)_$Id : "";
  }
  $else
  /**
   * Retrieves the value for the lexeme $Id.
   * @return The value for the lexeme $Id.
   * @apilevel high-level
   */
  @ASTNodeAnnotation.Token(name="$Id")
  $Modifier $Type $Host.get$Id() {
    $include(TokenComponent.incHookGetToken)
    return token$(TypeInSignature)_$Id;
  }
  $endif
$endif
]]
